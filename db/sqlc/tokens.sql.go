// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: tokens.sql

package db

import (
	"context"
	"time"
)

const deleteAllTokensForUser = `-- name: DeleteAllTokensForUser :exec
DELETE FROM tokens
WHERE scope= $1 AND user_id = $2
`

type DeleteAllTokensForUserParams struct {
	Scope  string `json:"scope"`
	UserID int64  `json:"user_id"`
}

func (q *Queries) DeleteAllTokensForUser(ctx context.Context, arg DeleteAllTokensForUserParams) error {
	_, err := q.db.ExecContext(ctx, deleteAllTokensForUser, arg.Scope, arg.UserID)
	return err
}

const insertToken = `-- name: InsertToken :exec
INSERT INTO tokens (hashed_token, user_id, expiry, scope)
VALUES ($1,$2,$3,$4)
`

type InsertTokenParams struct {
	HashedToken []byte    `json:"hashed_token"`
	UserID      int64     `json:"user_id"`
	Expiry      time.Time `json:"expiry"`
	Scope       string    `json:"scope"`
}

func (q *Queries) InsertToken(ctx context.Context, arg InsertTokenParams) error {
	_, err := q.db.ExecContext(ctx, insertToken,
		arg.HashedToken,
		arg.UserID,
		arg.Expiry,
		arg.Scope,
	)
	return err
}
